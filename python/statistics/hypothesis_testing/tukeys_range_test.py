"""Tukey's Range Test."""
from statsmodels import api as sm
from statsmodels.stats.multicomp import pairwise_tukeyhsd
from matplotlib import pyplot as plt
from matplotlib import lines
import seaborn as sns
from scipy import stats as st

#
# Codecademy example
#
# Sale data
endog = [
    73.57, 38.37, 49.36, 61.96, 38.74, 55.95, 36.65, 60.67, 63.08, 87.32,
    50.34, 57.11, 78.68, 61.04, 82.29, 53.59, 72.92, 74.56, 55.03, 41.26,
    53.8, 64.8, 70.7, 66.74, 75.01, 95.13, 49.46, 66.04, 53.03, 73.36,
    40.26, 71.04, 50.5, 38.22, 42.76, 52.51, 38.6, 59.68, 44.2, 46.93,
    55.24, 64.53, 34.1, 42.24, 52.87, 90.11, 59.77, 65.58, 67.4, 56.73,
    63.27, 45.37, 80.39, 87.66, 51.46, 66.0, 72.48, 64.3, 19.74, 46.24,
    52.35, 61.12, 56.21, 39.34, 57.93, 53.38, 48.82, 80.04, 42.25, 44.46,
    63.24, 53.76, 41.12, 70.37, 58.04, 53.81, 33.55, 50.06, 59.01, 63.19,
    56.36, 79.55, 57.58, 41.81, 63.3, 69.2, 79.08, 68.87, 54.62, 41.62,
    58.05, 57.2, 69.07, 76.74, 61.71, 90.45, 44.97, 14.93, 60.23, 37.04,
    38.58, 56.36, 95.83, 82.89, 48.08, 41.4, 39.62, 68.15, 62.51, 48.4,
    43.44, 53.87, 45.4, 42.65, 77.57, 42.22, 80.23, 52.21, 41.86, 83.4,
    63.2, 61.35, 80.03, 48.89, 53.98, 56.45, 50.14, 41.93, 62.24, 60.02,
    71.94, 59.38, 42.88, 79.19, 79.31, 48.45, 51.91, 41.14, 65.08, 49.21,
    82.51, 60.94, 56.83, 64.74, 69.44, 47.86, 72.52, 68.99, 58.24, 63.85,
    95.51, 54.36, 40.89, 96.22, 64.82, 100.9, 78.54, 59.59, 79.48, 54.66,
    88.84, 40.48, 58.27, 69.65, 63.21, 65.77, 72.47, 45.64, 48.23, 62.69,
    34.56, 63.63, 84.85, 56.85, 58.41, 76.6, 69.63, 53.56, 90.8, 44.35,
    82.75, 54.55, 59.29, 98.06, 35.48, 63.6, 56.3, 74.86, 75.29, 49.48,
    69.12, 58.05, 62.0, 80.08, 66.65, 72.14, 78.68, 61.99, 76.61, 54.86,
    56.21, 56.0, 67.64, 53.01, 80.55, 65.74, 54.63, 85.95, 66.66, 61.53,
    68.9, 68.06, 60.96, 15.25, 66.66, 53.68, 56.75, 69.33, 61.6, 71.0,
    67.31, 62.88, 68.36, 72.21, 39.0, 51.13, 63.06, 50.83, 108.85, 53.74,
    62.16, 56.31, 41.63, 55.45, 51.17, 50.74, 71.9, 51.56, 69.54, 60.26,
    57.44, 93.93, 68.31, 56.61, 56.11, 75.63, 65.45, 68.19, 65.51, 76.31,
    61.81, 88.89, 71.08, 82.18, 78.61, 54.36, 75.09, 56.54, 97.11, 84.46,
    87.9, 80.38, 53.98, 53.37, 51.79, 79.5, 81.88, 72.86, 69.07, 87.64,
    71.6, 81.26, 42.73, 79.41, 75.4, 73.63, 64.16, 60.89, 58.46, 69.63,
    50.83, 63.83, 66.37, 95.69, 59.77, 77.18, 62.47, 48.23, 58.16, 61.84,
    62.26, 76.83, 67.5, 38.5, 58.66, 58.98, 42.63, 54.83, 76.67, 82.04,
    62.8, 54.63, 49.87, 71.38, 85.13, 49.81, 75.35, 54.46, 86.72, 75.57,
    63.03, 57.38, 39.23, 82.7, 55.96, 61.76, 62.1, 66.93, 49.93, 51.14,
    31.67, 38.5, 49.36, 69.04, 45.21, 73.58, 100.61, 30.92, 37.16, 53.74,
    69.37, 60.15, 43.2, 51.13, 64.78, 63.29, 62.75, 71.76, 73.09, 75.48,
    47.9, 62.25, 66.34, 43.71, 80.66, 72.26, 100.91, 32.03, 58.32, 71.44,
    45.07, 69.71, 85.37, 55.68, 70.25, 55.81, 61.21, 55.42, 66.81, 36.99,
    42.37, 79.61, 58.89, 79.59, 59.17, 70.02, 85.3, 32.41, 52.61, 68.17,
    65.33, 60.01, 26.3, 87.45, 55.35, 60.29, 33.04, 80.19, 77.27, 76.76,
    100.95, 59.47, 78.08, 51.61, 86.95, 85.42, 54.84, 58.06, 66.17,
    62.28, 83.36, 44.72, 42.84, 71.72, 68.46, 55.93, 52.33, 65.53, 48.19,
    64.92, 56.24, 78.11, 55.81, 82.06, 67.03, 51.23, 51.64, 63.48, 71.78,
    71.37, 45.12, 82.25, 70.91, 62.51, 71.71, 66.38, 49.28, 41.29, 61.81,
    39.63, 73.54, 71.08, 61.88, 57.42, 69.83, 65.9, 77.11, 86.72, 81.81,
    65.85, 94.96, 69.97, 73.35, 75.06, 57.52, 62.37, 58.81, 63.38, 35.88,
    46.23, 56.05, 55.34, 45.85, 51.94, 70.16, 65.98, 50.51, 46.77, 70.39,
    42.06
]
# Store data
groups = [
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
    'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
    'C', 'C'
]
alpha = 0.05
tukey_results = pairwise_tukeyhsd(endog, groups, alpha)
# print(tukey_results)

# Load the dataset
dataset = sm.datasets.modechoice.load_pandas()
# Extract the data
df = dataset['data']
print(type(dataset))
print(list(dataset))
print(df.head())

df['mode'] = df['mode'].replace({1: 'Air', 2: 'Train', 3: 'Bus', 4: 'Car'})
df = df[df['mode'] != 'Air']

cols = ['invt', 'mode']
df = df[cols]
print(df.head())

# Plot
ax = plt.axes()
sns.boxplot(
   df, x='mode', y='invt', color='lightgrey', whis=[0, 100],
   showmeans=True, meanline=True, meanprops={'color': 'black'}
)
sns.stripplot(
   df, x='mode', y='invt',
   color='lightgrey', edgecolor='black', linewidth=1
)
# title = """Which pair(s) of group means are
# significantly different from each other?"""
# ax.set_title(title)
ax.set_title('Travel Mode Choice')
# ax.set_ylabel('')
ax.set_ylabel('Travel time (in-vehicle time) for all stages (minutes)')
ax.set_ylim([0, 1500])
ax.set_xlabel('')
handles = [lines.Line2D([0], [0], color='k', linewidth=1, linestyle='--')]
ax.legend(handles, ['Group Means'])
# plt.savefig('modechoice.png')

# Sample sizes
n = df['mode'].value_counts()
print(n)

# Homogeneity of variance (using sample standard deviations)
s = df.groupby('mode')['invt'].std(ddof=1)
for i in range(3):
    for j in range(i + 1, 3):
        ratio = s[i] / s[j]
        print(f'Ratio of standard deviations: {ratio:.2f}')

# Samples
sample_0 = df[df['mode'] == 'Train']['invt']
sample_1 = df[df['mode'] == 'Bus']['invt']
sample_2 = df[df['mode'] == 'Car']['invt']

# One-way ANOVA
f_statistic, p_value = st.f_oneway(sample_0, sample_1, sample_2)
print(f'One-way ANOVA: F = {f_statistic:.2f}, p = {p_value:.2e}')

# Tukey's range test
tukey_results = pairwise_tukeyhsd(df['invt'], df['mode'], 0.10)
print(tukey_results)
